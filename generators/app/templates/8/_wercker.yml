box: kporras07/drupal-wercker
build:
    steps:
    - script:
        name: Install Dependencies
        code: |
            npm install
            composer install --prefer-source --no-interaction
    - script:
        name: Setup Global Stuff
        code: |
            cp ./wercker/<%= appName %>.aliases.drushrc.php ~/.drush
            # Drupal settings.
            cp ./wercker/wercker.settings.secret.php ./settings/settings.secret.php
            # Install xvfb.
            sudo apt-get install xvfb -y
            # Install Chrome.
            mkdir -p $HOME/google-chrome && cd $HOME/google-chrome && curl -L -o google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
            sudo dpkg -i $HOME/google-chrome/google-chrome.deb || sudo apt-get update -y && sudo apt-get install -f -y
            # Install Chromedriver.
            wget https://chromedriver.storage.googleapis.com/2.25/chromedriver_linux64.zip
            unzip chromedriver_linux64.zip
            sudo ln -s $PWD/chromedriver /usr/bin/chromedriver
            # Install Java.
            sudo apt-get install software-properties-common python-software-properties -y
            sudo add-apt-repository ppa:openjdk-r/ppa -y
            sudo apt-get update -y
            sudo apt-get install openjdk-8-jdk -y
            # Download Selenium.
            wget http://selenium-release.storage.googleapis.com/3.0/selenium-server-standalone-3.0.1.jar
            # Start Selenium
            xvfb-run java -jar selenium-server-standalone-3.0.1.jar > /dev/null 2>&1 &
            # Restore current folder.
            cd $WERCKER_ROOT
            # Configure Apache.
            cp ./wercker/<%= appName %>.dev.conf /etc/apache2/sites-available/
            a2ensite <%= appName %>.dev
            a2enmod rewrite
            service apache2 restart
            # Edit hosts file.
            echo "127.0.0.1 <%= appName %>.dev" >> /etc/hosts

            # Prepare Drupal Installation and Install it.
            # Build the Drupal site and set files permissions.
            chown -R root:www-data ./files
            ./node_modules/.bin/aquifer build
            chmod 777 -R ./build/sites/default/files
            chown -R www-data:www-data ./build/sites/default/files
            # Set alias.
            drush site-set @<%= appName %>.<%= dashedAppName %>.dev
            drush cc drush
            # Start mysql and apache servers.
            service apache2 start
            service mysql start
            # Create Drupal DB
            mysql -u root -pAdmin2015 -e "create database drupal;"
            # Install Drupal and disable sendmail.
            if [ -f /pipeline/source/files/config/sync/core.extension.yml ] ; then /usr/bin/env PHP_OPTIONS="-d sendmail_path=`which true`" && drush si <%= appName %> -y ; drush config-set "system.site" uuid $SITE_UUID -y ; drush cim -y ; else /usr/bin/env PHP_OPTIONS="-d sendmail_path=`which true`" drush si <%= appName %> -y ; fi
            # Post build configuration.
            drush cc drush
            drush cr
            # Install dependencies for running visual regression tests with Wraith.
            \curl -sSL https://get.rvm.io | bash -s stable
            \curl -sSL https://get.rvm.io | bash -s -- --ignore-dotfiles
            source /usr/local/rvm/scripts/rvm
            rvm install 2.4
            rvm use 2.4
            sudo apt-get install libicu-dev imagemagick rake phantomjs -y
            sudo npm install -g casperjs
            gem install wraith

    - script:
        name: Test all the things!
        code: |
            # PHP Lint.
            ./node_modules/.bin/gulp phplint
            # Drupal Coding Standards.
            ./node_modules/.bin/gulp drupalcs
            # ESLint.
            ./node_modules/.bin/gulp eslint
            # Overridden features.
            # Available updates.
            drush @<%= appName %>.<%= appName %>.dev ups | grep -qi "update available" && (echo 'Updates available FAIL' && exit 1) || (echo 'No updates available PASS' && exit 0)
            # Behat tests.
            ./.vendor/bin/behat -p wercker
            # Visual regression tests.
            # wraith capture capture
deploy:
    steps:
    - script:
        name: Install ssh and other dependencies
        code: |
            apt-get update -y
            apt-get install -y build-essential curl wget git php5-curl unzip php5-mysql php5-gd ssh-client openssh-client keychain
    - add-ssh-key:
        keyname: DEPLOYMENT_KEY
    - script:
        name: Install other dependencies
        code: |
            eval `ssh-agent`
            ssh-add /tmp/tmp.*
            composer install --prefer-source --no-interaction
            npm install
            echo 'Host *' >> /root/.ssh/config
            echo '   StrictHostKeyChecking no' >> /root/.ssh/config
            git config --global user.email "you@example.com"
            git config --global user.name "Your Name"
    - script:
        name: Install Pantheon CLI
        code: |
            terminus auth login --machine-token=$PANTHEON_TOKEN
            terminus sites aliases
    - script:
        name: Deploy code to pantheon
        code: |
            echo 'Load aquifer extensions...'
            ./node_modules/.bin/aquifer extensions-load
            echo 'Ensure we are on git mode'
            terminus site set-connection-mode --site=<%= dashedAppName %> --env=dev --mode=git
            ./node_modules/.bin/aquifer deploy-git -m "Auto deploy triggered from $WERCKER_GIT_BRANCH branch" || true
    - script:
        name: Deploy steps to pantheon dev
        code: |
            echo 'Host *' >> /root/.ssh/config
            echo '   StrictHostKeyChecking no' >> /root/.ssh/config
            mkdir -p ~/.drush
            cp ./wercker/policy.drush.inc ~/.drush/
            drush cc drush
            drush site-set @pantheon.<%= dashedAppName %>.dev
            echo 'Set sftp'
            terminus site set-connection-mode --site=<%= dashedAppName %> --env=dev --mode=sftp
            if [ -f ./files/config/sync/core.extension.yml ] ; then drush si <%= appName %> -y ; drush config-set "system.site" uuid "$SITE_UUID" -y ; drush cim -y ; else drush si <%= appName %> -y ; fi
            echo 'Set git'
            terminus site set-connection-mode --site=<%= dashedAppName %> --env=dev --mode=git
            # Post build configuration.
            drush cc drush --strict=0
            drush cr --strict=0
deploy-test:
    steps:
    - script:
        name: Install ssh and other dependencies
        code: |
            apt-get update -y
            apt-get install -y build-essential curl wget git php5-curl unzip php5-mysql php5-gd ssh-client openssh-client keychain
    - add-ssh-key:
        keyname: DEPLOYMENT_KEY
    - script:
        name: Install other dependencies
        code: |
            eval `ssh-agent`
            ssh-add /tmp/tmp.*
            composer install --prefer-source --no-interaction
            npm install
    - script:
        name: Install Pantheon CLI
        code: |
            terminus auth login --machine-token=$PANTHEON_TOKEN
            terminus sites aliases
    - script:
        name: Deploy code to test
        code: |
            terminus site deploy --site=<%= appName %> --env=test --sync-content --note="Deployed from wercker UI"
    - script:
        name: Deploy steps to pantheon test
        code: |
            echo 'Host *' >> /root/.ssh/config
            echo '   StrictHostKeyChecking no' >> /root/.ssh/config
            mkdir -p ~/.drush
            cp ./wercker/policy.drush.inc ~/.drush/
            # Post build configuration.
            terminus drush --site=<%= appName %> --env=test "sqlsan -y --strict=0"
            terminus drush --site=<%= appName %> --env=test "cc drush --strict=0"
            terminus drush --site=<%= appName %> --env=test "updb -y --strict=0"
            terminus drush --site=<%= appName %> --env=test "cim -y --strict=0"
            terminus drush --site=<%= appName %> --env=test "cr --strict=0"
deploy-live:
    steps:
    - script:
        name: Install ssh and other dependencies
        code: |
            apt-get update -y
            apt-get install -y build-essential curl wget git php5-curl unzip php5-mysql php5-gd ssh-client openssh-client keychain
    - add-ssh-key:
        keyname: DEPLOYMENT_KEY
    - script:
        name: Install other dependencies
        code: |
            eval `ssh-agent`
            ssh-add /tmp/tmp.*
            composer install --prefer-source --no-interaction
            npm install
    - script:
        name: Install Pantheon CLI
        code: |
            terminus auth login --machine-token=$PANTHEON_TOKEN
            terminus sites aliases
    - script:
        name: Deploy code to live
        code: |
            terminus site deploy --site=<%= appName %> --env=live --note="Deployed from wercker UI"
    - script:
        name: Deploy steps to pantheon live
        code: |
            echo 'Host *' >> /root/.ssh/config
            echo '   StrictHostKeyChecking no' >> /root/.ssh/config
            mkdir -p ~/.drush
            cp ./wercker/policy.drush.inc ~/.drush/
            # Post build configuration.
            terminus drush --site=<%= appName %> --env=live "sqlsan -y --strict=0"
            terminus drush --site=<%= appName %> --env=live "cc drush --strict=0"
            terminus drush --site=<%= appName %> --env=live "updb -y --strict=0"
            terminus drush --site=<%= appName %> --env=live "cim -y --strict=0"
            terminus drush --site=<%= appName %> --env=live "cr --strict=0"
deploy-multidev:
    steps:
    - script:
        name: Install ssh and other dependencies
        code: |
            apt-get update -y
            apt-get install -y build-essential curl wget git php5-curl unzip php5-mysql php5-gd ssh-client openssh-client keychain
    - add-ssh-key:
        keyname: DEPLOYMENT_KEY
    - script:
        name: Install other dependencies
        code: |
            eval `ssh-agent`
            ssh-add /tmp/tmp.*
            npm install
            composer global require drush/drush:7.1.* --no-interaction
            echo 'Host *' >> /root/.ssh/config
            echo '   StrictHostKeyChecking no' >> /root/.ssh/config
            git config --global user.email "you@example.com"
            git config --global user.name "Your Name"
    - script:
        name: Install Pantheon CLI
        code: |
            terminus auth login --machine-token=$PANTHEON_TOKEN
            terminus sites aliases
    - script:
        name: Deploy code to pantheon
        code: |
            echo 'Load aquifer extensions...'
            ./node_modules/.bin/aquifer extensions-load
            NEWBRANCH=$WERCKER_GIT_BRANCH
            LENGTH=${#NEWBRANCH}
            if [ LENGTH > 10 ] ; then NEWBRANCH=${NEWBRANCH:8:6} ; fi
            NEWBRANCH=${NEWBRANCH//-/}
            NEWBRANCH=${NEWBRANCH,,}
            aquifer deploy-git -m "Auto deploy triggered from $WERCKER_GIT_BRANCH branch" -b $NEWBRANCH || true
    - script:
        name: Deploy steps to pantheon dev
        code: |
            echo 'Host *' >> /root/.ssh/config
            echo '   StrictHostKeyChecking no' >> /root/.ssh/config
            mkdir -p ~/.drush
            cp ./wercker/policy.drush.inc ~/.drush/
            terminus site create-env --site=<%= appName %> --to-env=$NEWBRANCH --from-env=dev
            terminus sites aliases
            drush site-set @pantheon.<%= dashedAppName %>.$NEWBRANCH
            echo 'Set sftp'
            terminus site set-connection-mode --site=<%= appName %> --env=$NEWBRANCH --mode=sftp
            if [ -f /pipeline/source/files/config/sync/core.extension.yml ] ; then drush si <%= appName %> ; drush config-set "system.site" uuid "$SITE_UUID" -y ; drush cim -y ; else drush si <%= appName %> -y ; fi
            echo 'Set git'
            terminus site set-connection-mode --site=<%= appName %> --env=$NEWBRANCH --mode=git
            # Post build configuration.
            terminus drush --site=<%= appName %> --env=$NEWBRANCH "cc drush --strict=0"
            terminus drush --site=<%= appName %> --env=$NEWBRANCH "cr --strict=0"
            echo "If everything worked, go to http://$NEWBRANCH-<%= appName %>.pantheonsite.io"
